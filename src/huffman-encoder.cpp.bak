#include "huffman-encoder.h"
#include <exception>
#include <climits>
#include <cstring>
#include <functional>

// XXX... Currently supports only ascii text files
// Compresses the file specified by the fstream and returns
// another fstream that is a handle to the compressed file
byte* HuffmanEncoder :: encode(byte *in_buff, fsize_t *buff_len) {
	//@std::cout << "In HuffmanEncoder::encode()" << std::endl;
	Log(this, "Started...");

	m_inBuffSize = *buff_len;

	// This will hold bytes of the compressed data;
	// Header + content
	byte *out_buff = NULL;

	try {
		// All the 3 statements below must be in this sequence only.
		buildFrequencyTable(in_buff);			// (OK)
		buildHuffmanTree();						// (OK)
		buildCodewordTable();					// (OK)
	}
	catch(std::exception &e) {
		std::cerr << e.what() << std::endl
			<< "[.......Rethrowing exception]" << std::endl;
		throw (new std::exception(e));
	}

	// FIXME & TODO ... This code is just temporary.
	// Later the metadata specific operations will be moved to the
	// actual metadata module.
	int i = 0;
	struct codeword_map_struct temp[(*m_codewordTable).size()];
	for(auto &x : *m_codewordTable) {
		temp[i].sym = x.first; // 'byte'
		//@@@ std::cout << temp[i].sym << " : " << x.second << " : ";
		// Reserve enough bytes in 'temp[i].codeword.cw' for store codeword bits
		fsize_t word_len = compute_word_len(x.second.length());
		//@@@ std::cout << word_len << " : ";
		temp[i].codeword.cw = new byte[word_len];
		temp[i].codeword.n_bits = word_len;
		memset(temp[i].codeword.cw, 0, word_len);

		// TODO... Make this code a separate module.
		// Now push each character as a bit into 'cw'
		int byte_forwarder = 8; //XXX... Required if 'cw' is multibyte
		int j = 0; // 'cw' index
		for(char& ch : x.second) {
			if(byte_forwarder > 0) {
				temp[i].codeword.cw[j] <<= 1; // left shift by 1 bit
				if(ch == '1') {
					temp[i].codeword.cw[j] =
						temp[i].codeword.cw[j] | 0x01; // or with 1
				}
				else if(ch == '0') {
					temp[i].codeword.cw[j] =
						temp[i].codeword.cw[j] | 0x00; // or with 0;
				}
				else {
					std::cerr <<
						"[Fatal Error]: Codeword is invalid"
						<< std::endl;
						throw (new std::exception());
				}
				byte_forwarder--;
			} //(byte_forwarder>0)
			else {
				byte_forwarder = 8;
				j++;
			}
		}

		/* Just checking 'cw'....
		for(int k=0; k<=j; ++k)
			std::cout << "0x" << std::hex << (int)temp[i].codeword.cw[k] << std::endl
				<< std::dec;
		*/
		i++; // To next symbol(byte)
	}

	// Almost all header parameters are set here.
	struct header_struct *header = init_header(m_codewordTable);
	header->cw_map = temp;
	header->compression_algo = HUFFMAN_CODEC;
	header->file_state = header_struct::state::COMPRESSED;

	// Compute the total header size...
    unsigned long cw_map_offset = (unsigned long)&(header->cw_map) - (unsigned long)header;
	unsigned long cw_codeword_offset =
		(unsigned long)&(header->cw_map[0].codeword) - (unsigned long)(header->cw_map);
	unsigned long cw_offset =
	    (unsigned long)&(header->cw_map->codeword.cw) - (unsigned long)&(header->cw_map->codeword);
	header->header_size
		= cw_map_offset	+ header->n_syms *
		  (cw_codeword_offset +
			  (cw_offset + compute_word_len(header->cw_map->codeword.n_bits))
		  );
	//@@@ std::cout << "size(header) = " << header->size() << std::endl;
	/*
	std::cout << (int)header->compression_algo << ", "
		<< header->file_state << ", " <<
		header->n_syms << ", [" <<
		header->cw_map << std::endl;
	std::cout << HUFFMAN_CODEC << ", "
			<< header_struct::state::COMPRESSED << ", " <<
			header->n_syms << ", [" <<
			header->cw_map << std::endl;
	*/

	// By this moment the 'header' struct is completely set with
	// appropriate parameters.

	out_buff = get_compressed_byte_stream(in_buff, m_inBuffSize, header); // TODO
	std::cout << "Header size = " << header->size() <<  std::endl;
	*buff_len = header->compressed_size;
	return out_buff;
}

// Build symbol-frequency table
void HuffmanEncoder :: buildFrequencyTable(byte *buffer) {
	//@std::cout << "In HuffmanEncoder::buildFrequencyTable()" << std::endl;
	Log(this, "Started...");

	std::cout << "File size: " << m_inBuffSize << std::endl;

	// Compute the frequencies of each byte in buffer and generate the
	// symbol-frequency map
	int i, j;	//, freq_len = 0;
	double frequency[UCHAR_MAX + 1] = {0}; // 2^8-1 = 255 = UCHAR_MAX different symbols
	memset(frequency, 0, UCHAR_MAX);
	for(i = 0; buffer[i] != '\0'; i++) {
		j = buffer[i]; // Just to typecast 'byte' to 'int'
		++(frequency[j]);
	}

	/****** Test *******
	for(i = 0; i <= UCHAR_MAX; i++) {
		std::cout << "frequency[" << i << "] = " << frequency[i] << std::endl;
	}
	****/

	// Fill the original symbol-frequency map by filtering out symbols
	// that does not exist(or frequency[symbol(i)] = 0)
	for(i = 0; i <= UCHAR_MAX; i++) {
		if(frequency[i] > 0) {
			byte b = i;
			(*m_frequencyTable)[b] = frequency[i];
		}
	}


	for(auto& x : *m_frequencyTable)
		x.second = (x.second / m_inBuffSize) * 100;

	/****** Test *******
	for(auto& x : *m_frequencyTable)
		std::cout << x.first << ":" << x.second << std::endl;
	//std::cout << (*m_frequencyTable)[(byte)'0'] << std::endl;
	****/

	//asm("nop");
}

// Build a huffman tree as priority queue provided by C++ STL
// Builds the 'm_huffmanTree' data structure
void HuffmanEncoder :: buildHuffmanTree() {
	Log(this, "Started...");

	MinHeapNode<byte, double> *left, *right, *top;

	// Create a min heap & inserts all characters of data[]
	//@@@ MinHeap<byte, double> minHeap;
	for(auto& x : *m_frequencyTable)
		m_huffmanTree->push(new MinHeapNode<byte, double>(x.first, x.second));
	//printMinheap(*m_huffmanTree);

	// Iterate while size of heap doesn't become 1
	while (m_huffmanTree->size() != 1)
	{
		// Extract the two minimum freq items from min heap
		left = m_huffmanTree->top();
		m_huffmanTree->pop();

		right = m_huffmanTree->top();
		m_huffmanTree->pop();

		// Create a new internal node with frequency equal to the
		// sum of the two nodes frequencies. Make the two extracted
		// node as left and right children of this new node. Add
		// this node to the min heap.
		// 0x00 is a special value for internal nodes.
		top = new MinHeapNode<byte, double>(0x00, left->freq + right->freq, true);
		top->left = left;
		top->right = right;
		m_huffmanTree->push(top);
	}
	//printMinheap(*m_huffmanTree);
	//traversePreorder(m_huffmanTree->top(), "");
}

// TODO TODO TODO TODO
// Generate code word table
void HuffmanEncoder :: buildCodewordTable()
{
	Log(this, "Started...");

	/* --- This code is unlikely to happen unless someone really forgets ---
	 * -- Avoided! Since it will unnecessarily occupy each recursion stack --
	 *
	 * If prerequisites doesn't exist
	if(!m_codewordTable || !m_frequencyTable || !m_huffmanTree)
		throw 10;
	*/

	// Huffman tree parser lambda
	std::function<void(MinHeapNode<byte, double>*, const std::string&)>
		huffmanTreeParser;
	huffmanTreeParser =
			[&](MinHeapNode<byte, double>* root, const std::string &codeword) {
				if(root) {
					if(!root->isInternalNode()) {
						(*m_codewordTable)[root->data] = codeword;
						//@@@ std::cout << root->data << ": " << codeword << std::endl;
					}
					huffmanTreeParser(root->left, codeword + "0");
					huffmanTreeParser(root->right, codeword + "1");
				}
			};

	huffmanTreeParser(m_huffmanTree->top(), "");

	/* Just testing
	for(auto &x : *m_codewordTable)
		std::cout << x.first << " : " << x.second << std::endl;
	*/
}
